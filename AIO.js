class Durak{constructor(a,b,c,d,e=[],f=[],g=null){this.state={playerCards:a,playerTurn:b,trump:c,cardsOnTable:d,attackCards:e,deck:f,lowerTrump:g,endGame:!0,winner:-1,gameOver:!1,isTaking:!1}}getState(){return this.state}setState(a){this.state=a}getPlayerTurn(){return this.state.playerTurn}getTrump(){return this.state.trump}endGame(){return this.state.endGame}cloneState(){JSON.parse(JSON.stringify(this.state))}static sameCard(a,b){return a.Value===b.Value&&a.Type===b.Type?!0:!1}moves(){let a=[];if(0===
this.state.playerCards[this.state.playerTurn].length&&0===this.state.deck.length)return this.state.winner=this.state.playerTurn,this.state.gameOver=!0,["Game Over"];if(0===this.state.cardsOnTable.length)a=this.state.playerCards[this.state.playerTurn];else if(0===this.state.attackCards.length||this.state.isTaking){if(this.state.isTaking&&this.state.attackCards.length===this.state.playerCards[0===this.state.playerTurn?1:0].length)return["pass"];a=this.state.playerCards[this.state.playerTurn].filter(d=>
this.state.cardsOnTable.some(e=>e.Value===d.Value));a.push("pass")}else if(0!==this.state.attackCards.length){if(this.state.attackCards[0].Type!==this.state.trump)for(var b=0;b<this.state.playerCards[this.state.playerTurn].length;b++){var c=this.state.playerCards[this.state.playerTurn][b].Type;let d=this.state.playerCards[this.state.playerTurn][b].Value;(c===this.state.attackCards[0].Type&&d>this.state.attackCards[0].Value||c===this.state.trump)&&a.push(this.state.playerCards[this.state.playerTurn][b])}else for(b=
0;b<this.state.playerCards[this.state.playerTurn].length;b++)c=this.state.playerCards[this.state.playerTurn][b].Value,this.state.playerCards[this.state.playerTurn][b].Type===this.state.attackCards[0].Type&&c>this.state.attackCards[0].Value&&a.push(this.state.playerCards[this.state.playerTurn][b]);a.push("take")}return a}playMove(a){switch(a){case "pass":if(this.state.isTaking){let b=0===this.state.playerTurn?1:0;this.state.cardsOnTable.forEach(c=>this.state.playerCards[b].push(c));this.state.isTaking=
!1;this.takeCards(this.state.playerTurn)}else this.takeCards(this.state.playerTurn),this.state.playerTurn=0===this.state.playerTurn?1:0;this.state.cardsOnTable=[];this.state.attackCards=[];break;case "take":this.state.isTaking=!0;this.state.playerTurn=0===this.state.playerTurn?1:0;break;default:this.state.isTaking?(this.state.cardsOnTable.push(a),this.state.attackCards.push(a),this.state.playerCards[this.state.playerTurn]=this.state.playerCards[this.state.playerTurn].filter(b=>!Durak.sameCard(b,a)),
0===this.state.playerCards[this.state.playerTurn].length&&0===this.state.deck.length&&(this.state.winner=this.state.playerTurn,this.state.gameOver=!0)):(this.state.cardsOnTable.push(a),this.state.playerCards[this.state.playerTurn]=this.state.playerCards[this.state.playerTurn].filter(b=>!Durak.sameCard(b,a)),0===this.state.playerCards[this.state.playerTurn].length&&0===this.state.deck.length?(this.state.winner=this.state.playerTurn,this.state.gameOver=!0):0===this.state.attackCards.length?(this.state.attackCards.push(a),
this.state.playerTurn=0===this.state.playerTurn?1:0):1===this.state.attackCards.length?(this.state.attackCards.shift(),this.state.playerTurn=0===this.state.playerTurn?1:0):this.state.attackCards.shift())}}takeCards(a){function b(c,d){if(!d.endGame){var e=6-d.playerCards[c].length;for(let f=0;f<e;f++){if(0===d.deck.length){if(null==d.lowerTrump){d.endGame=!0;break}d.deck.push(d.lowerTrump);d.lowerTrump=null}d.playerCards[c].push(d.deck[0]);d.deck.shift()}}}a?(6>this.state.playerCards[1].length&&b(1,
this.state),6>this.state.playerCards[0].length&&b(0,this.state)):(6>this.state.playerCards[0].length&&b(0,this.state),6>this.state.playerCards[1].length&&b(1,this.state))}gameOver(){return this.state.gameOver}winner(){return this.state.winner}}
class DurakReverse{constructor(a,b,c,d,e=[],f=[],g=null,h=!0){this.state={playerCards:a,playerTurn:b,trump:c,cardsOnTable:d,attackCards:e,deck:f,lowerTrump:g,endGame:h,winner:-1,gameOver:!1,isTaking:!1}}getState(){return this.state}setState(a){this.state=a}getPlayerTurn(){return this.state.playerTurn}getTrump(){return this.state.trump}endGame(){return this.state.endGame}cloneState(){return JSON.parse(JSON.stringify(this.state))}static sameCard(a,b){return a.Value===b.Value&&a.Type===b.Type?!0:!1}moves(){let a=
[];if(0===this.state.playerCards[this.state.playerTurn].length&&0===this.state.deck.length)return this.state.winner=this.state.playerTurn,this.state.gameOver=!0,["Game Over"];var b=0===this.state.playerTurn?1:0;if(0===this.state.cardsOnTable.length)a.push(...this.state.playerCards[this.state.playerTurn]),b=this.state.playerCards[b].length,1<b&&this.addPairMoves(a,b);else if(0===this.state.attackCards.length||this.state.isTaking){if(this.state.isTaking&&this.state.attackCards.length===this.state.playerCards[b].length)return["pass"];
a=this.state.playerCards[this.state.playerTurn].filter(e=>this.state.cardsOnTable.some(f=>f.Value===e.Value));a.push("pass")}else if(0!==this.state.attackCards.length){if(this.state.attackCards[0].Type!==this.state.trump)for(var c=0;c<this.state.playerCards[this.state.playerTurn].length;c++){var d=this.state.playerCards[this.state.playerTurn][c].Type;let e=this.state.playerCards[this.state.playerTurn][c].Value;(d===this.state.attackCards[0].Type&&e>this.state.attackCards[0].Value||d===this.state.trump)&&
a.push(this.state.playerCards[this.state.playerTurn][c])}else for(c=0;c<this.state.playerCards[this.state.playerTurn].length;c++)d=this.state.playerCards[this.state.playerTurn][c].Value,this.state.playerCards[this.state.playerTurn][c].Type===this.state.attackCards[0].Type&&d>this.state.attackCards[0].Value&&a.push(this.state.playerCards[this.state.playerTurn][c]);if(this.state.attackCards.length===this.state.cardsOnTable.length&&this.state.attackCards.length<this.state.playerCards[b].length)for(c=
this.state.playerCards[b].length,b=this.state.playerCards[this.state.playerTurn].filter(e=>e.Value==this.state.attackCards[0].Value),1<c-this.state.attackCards.length&&this.addPairMoves(b,c-this.state.attackCards.length),c=0;c<b.length;c++)a.push({action:"perevod",card:b[c]});a.push("take")}return a}playMove(a){switch(a){case "pass":if(this.state.isTaking){let b=0===this.state.playerTurn?1:0;this.state.cardsOnTable.forEach(c=>this.state.playerCards[b].push(c));this.state.isTaking=!1;this.takeCards(this.state.playerTurn)}else this.takeCards(this.state.playerTurn),
this.state.playerTurn=0===this.state.playerTurn?1:0;this.state.cardsOnTable=[];this.state.attackCards=[];break;case "take":this.state.isTaking=!0;this.state.playerTurn=0===this.state.playerTurn?1:0;break;default:if(this.state.isTaking)this.state.cardsOnTable.push(a),this.state.attackCards.push(a),this.state.playerCards[this.state.playerTurn]=this.state.playerCards[this.state.playerTurn].filter(b=>!DurakReverse.sameCard(b,a)),0===this.state.playerCards[this.state.playerTurn].length&&0===this.state.deck.length&&
(this.state.winner=this.state.playerTurn,this.state.gameOver=!0);else if("perevod"===a.action){if(Array.isArray(a.card))for(const b of a.card)this.state.cardsOnTable.push(b),this.state.attackCards.push(b),this.state.playerCards[this.state.playerTurn]=this.state.playerCards[this.state.playerTurn].filter(c=>!DurakReverse.sameCard(c,b));else this.state.cardsOnTable.push(a.card),this.state.attackCards.push(a.card),this.state.playerCards[this.state.playerTurn]=this.state.playerCards[this.state.playerTurn].filter(b=>
!DurakReverse.sameCard(b,a.card));this.state.playerTurn=0===this.state.playerTurn?1:0}else this.state.cardsOnTable.push(a),this.state.playerCards[this.state.playerTurn]=this.state.playerCards[this.state.playerTurn].filter(b=>!DurakReverse.sameCard(b,a)),0===this.state.playerCards[this.state.playerTurn].length&&0===this.state.deck.length?(this.state.winner=this.state.playerTurn,this.state.gameOver=!0):0===this.state.attackCards.length?(this.state.attackCards.push(a),this.state.playerTurn=0===this.state.playerTurn?
1:0):1===this.state.attackCards.length?(this.state.attackCards.shift(),this.state.playerTurn=0===this.state.playerTurn?1:0):this.state.attackCards.shift()}}takeCards(a){function b(c,d){if(!d.endGame){var e=6-d.playerCards[c].length;for(let f=0;f<e;f++){if(0===d.deck.length){if(null==d.lowerTrump){d.endGame=!0;break}d.deck.push(d.lowerTrump);d.lowerTrump=null}d.playerCards[c].push(d.deck[0]);d.deck.shift()}}}a?(6>this.state.playerCards[1].length&&b(1,this.state),6>this.state.playerCards[0].length&&
b(0,this.state)):(6>this.state.playerCards[0].length&&b(0,this.state),6>this.state.playerCards[1].length&&b(1,this.state))}gameOver(){return this.state.gameOver}winner(){return this.state.winner}addPairMoves(a,b){function c(e){var f=e.length;return Array(Math.pow(2,f)).map((g,h)=>{g=-1;for(var k=[];++g<f;)h&1&&k.push(e[g]),h>>=1;return k}).slice(1)}var d=function(e){const f={};e.forEach(g=>{const {Value:h}=g;f[h]||(f[h]=[]);f[h].push(g)});return Object.values(f)}(a);for(const e of d)if(2===e.length)a.push(e);
else if(3===e.length){d=c(e);for(const f of d)2<=f.length&&f.length<=b&&a.push(f)}}}class MCTSNode{constructor(a,b){this.moves=a;this.parent=b;this.wins=this.visits=0;this.numUnexpandedMoves=a.length;this.children=Array(this.numUnexpandedMoves).fill(null)}}
class MCTS{constructor(a,b,c,d){this.game=a;this.player=b;this.iterations=c;this.exploration=d;void 0==this.iterations&&(this.iterations=500);void 0==this.exploration&&(this.exploration=1.41)}selectMove(){var a=this.game.cloneState(),b=this.game.moves();const c=new MCTSNode(b,null);for(let e=0;e<this.iterations;e++){this.game.setState(a);var d=this.game.cloneState();this.game.setState(d);d=this.selectNode(c);this.game.gameOver()&&this.game.winner()!=this.player&&-1!=this.game.winner()&&(d.parent.wins=
Number.MIN_SAFE_INTEGER);d=this.expandNode(d);this.playout();let f;f=this.game.winner()==this.player?1:0;this.backprop(d,f)}b=b[this.getBestChildIndex(c)];this.game.setState(a);console.log(c);a=this.getPv(c);return{move:b,pv:a,stats:{wins:c.wins,visits:c.visits}}}selectNode(a){const b=this.exploration;for(;0==a.numUnexpandedMoves;){var c=-Infinity;let f=-1,g=a.visits;for(let h in a.children){var d=a.children[h],e=d.visits;d=this.game.getPlayerTurn()==this.player?d.wins:-d.wins;e=this.computeUCB(d,
e,b,g);e>c&&(c=e,f=h)}c=this.game.moves();this.game.playMove(c[f]);a=a.children[f];if(this.game.gameOver())break}return a}expandNode(a){if(this.game.gameOver())return a;var b=this.game.moves();const c=this.selectRandomUnexpandedChild(a);this.game.playMove(b[c]);b=this.game.moves();b=new MCTSNode(b,a);a.children[c]=b;--a.numUnexpandedMoves;return b}playout(){for(;!this.game.gameOver();){const a=this.greedyMove();this.game.playMove(a)}return this.game.winner()}backprop(a,b){for(;null!=a;)a.visits+=
1,a.wins+=b,a=a.parent}selectRandomUnexpandedChild(a){const b=Math.floor(Math.random()*a.numUnexpandedMoves);let c=-1;for(let d in a.children)if(null==a.children[d]&&(c+=1),c==b)return d}computeUCB(a,b,c,d){return a/b+c*Math.sqrt(Math.log(d)/b)}getBestChildIndex(a){let b=-Infinity,c=-1;for(let d in a.children){const e=a.children[d];null!=e&&e.wins>b&&(b=e.wins,c=d)}return c}getPv(a){const b=[];for(;0!=a.children.length;){let c=this.getBestChildIndex(a);b.push(a.moves[c]);a=a.children[c];if(void 0==
a)break}return b}lowestRankCard(a){const b=c=>{if(1>=c.length)return c;let d=c[0],e=[],f=[];for(let g=1;g<c.length;g++)c[g].Value<d.Value?e.push(c[g]):f.push(c[g]);return[...b(e),d,...b(f)]};return b(a)[0]}greedyMove(){const a=this.game.moves();if(1===a.length)return a[0];const b=a.filter(e=>"object"===typeof e);var c=Math.floor(Math.random()*a.length);if(.3>Math.random())return a[c];const d=this.game.getTrump();c=b.filter(e=>e.Type!=d);return 0===c.length?!this.game.endGame()&&a.includes("pass")?
a[a.length-1]:this.lowestRankCard(b):this.lowestRankCard(c)}};
